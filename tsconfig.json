// https://github.com/JasonkayZK/typescript_learn/tree/2-compile-options 编译文档解释
{
  "included": [
    "./markDown/TypeScript/**/*"
  ], /* 配置 tsc 命令编译 数组内 的文件，一个 * 表示任意文件，两个 ** 表示任意目录，可以写正则，会被 exclude 排除 */
  // "exclude": ["demo1.ts"], /* 配置 tsc 命令编译 数组外 的文件 */
  // "files":["demo1.ts"], /* 作用和included一样，不可以写正则，不会被 exclude 排除 */
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */
    /* Basic Options */
    // "incremental": true,                   /* Enable incremental compilation */
    "target": "es6", /* 设置ts代码编译的目标版本，默认 ES3 */
    "module": "es2015", /* 设置编译后代码使用的模块化系统，可选值: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    // "lib": ["ES6", "DOM"],                 /* 指定代码运行时所包含的库（宿主环境），根据使用的库检查代码 */
    // "allowJs": true,                       /* 是否对js文件编译 */
    // "checkJs": true,                       /* 是否对js文件进行检查 */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // "sourceMap": true,                     /* true 开启 sourceMap 文件源代码到编译代码的映射 */
    // "outDir": "./dist",                    /* 编译后文件的所在目录 */
    // "outFile": "./",                       /* 将所有的文件编译为一个js文件，如果采用了模块化，那么模块化编译方式必须采用 system 或 amd */
    // "rootDir": "./src",                    /* 指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录 */
    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    "removeComments": true, /* ts转js编译的时候去掉注释 */
    // "noEmit": true,                        /* 不对代码进行编译成JS */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    /* Strict Type-Checking Options */
    "strict": true, /* 编译和书写规范严格按照 TypeScript 的规范来执行。若开启此项，此项至 Additional Checks 之间的所有项都固定为 true */
    // "noImplicitAny": true, /* 禁止隐式的any类型 */
    // "strictNullChecks": true,              /* 严格的空值检查，false 允许 null 为 true */
    // "strictFunctionTypes": true,           /* 严格检查函数的类型 */
    // "strictBindCallApply": true,           /* 严格检查bind、call和apply的参数列表 */
    // "strictPropertyInitialization": true,  /* 严格检查属性是否初始化 */
    // "noImplicitThis": true,                /* 禁止类型不明确的this */
    // "alwaysStrict": true,                  /* 总是以严格模式对代码进行编译 */
    /* Additional Checks */
    "noUnusedLocals": true, /* 检查未使用的局部变量，开启后没有使用的变量不会进行编译 */
    // "noUnusedParameters": true,            /* 检查未使用的参数 */
    // "noImplicitReturns": true,             /* 检查函数没有隐式的返回值 */
    // "noFallthroughCasesInSwitch": true,    /* 检查switch语句包含正确的break */
    // "noUncheckedIndexedAccess": true,      /* Include 'undefined' in index signature results */
    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true, /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */
    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */
    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
    /* Advanced Options */
    "skipLibCheck": true, /* Skip type checking of declaration files. */
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */
  }
}