{
  "include": [
    "./src"
  ], /* 配置 tsc 命令编译 数组内 的文件，一个 * 表示任意文件，两个 ** 表示任意目录，可以写正则，会被 exclude 排除 */
  "exclude": [
    "config",
    "node_modules",
    "build",
    "scripts",
    "acceptance-tests",
    "webpack",
    "jest",
    "tslint:latest",
    "tslint-config-prettier"
  ], /* 配置 tsc 命令编译 数组外 的文件 */
  // "files":["demo1.ts"], /* 作用和included一样，不可以写正则，不会被 exclude 排除 */
  // "extends": "", // extends可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置，继承来的文件的配置会覆盖当前文件定义的配置。TS在3.2版本开始，支持继承一个来自Node.js包的tsconfig.json配置文件
  // "compileOnSave": true, // compileOnSave的值是true或false，如果设为true，在我们编辑了项目中的文件保存的时候，编辑器会根据tsconfig.json中的配置重新生成文件，不过这个要编辑器支持
  // "references": [], // 一个对象数组，指定要引用的项目
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */
    /* Basic Options */
    // "incremental": true,                         /* 启用渐进式编译功能 */
    "target": "es6", /* 指定ECMAScript目标版本：'ES3'（默认）、'ES5'、'ES2015'、'ES2016'、'ES2017'、'ES2018'、'ES2019'、'ES2020'、或'ESNEXT'。 */
    "module": "es2015", /* 指定模块代码生成："none"、"commonjs"、"amd"、"system"、"umd"、"es2015"、"es2020"、或 "ESNext"。 */
    "lib": [
      "ES6",
      "DOM"
    ], /* 指定要包含在编译中的库文件。 */
    "allowJs": true, /* 允许javascript文件被编译。 */
    "checkJs": true, /* 报告.js文件中的错误。 */
    "jsx": "react", /* 指定JSX代码生成："preserve"、"react-native"、"react"、"react-jsx "或 "react-jsxdev"。 */
    // "declaration": true,                         /* 指定是否在编译的时候生成相应的".d.ts"声明文件。如果设为true，编译每个ts文件之后会生成一个js文件和一个声明文件。但是declaration和allowJs不能同时设为true */
    // "declarationMap": true,                      /* 指定是否为声明文件.d.ts生成map文件 */
    "sourceMap": true, /* 用来指定编译时是否生成.map文件 */
    // "outFile": "./",                             /* 用于指定将输出文件合并为一个文件，它的值为一个文件路径名。比如设置为"./dist/main.js"，则输出的文件为一个main.js文件。但是要注意，只有设置module的值为amd和system模块时才支持这个配置 */
    "outDir": "./dist", /* 用来指定输出文件夹，值为一个文件夹路径字符串，输出的文件都将放置在这个文件夹 */
    // "rootDir": "./",                             /* 用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译器发现以rootDir的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译 */
    // "composite": true,                           /* 是否编译构建引用项目   */
    // "tsBuildInfoFile": "./",                     /* Specify file to store incremental compilation information */
    "removeComments": true, /* ts转js编译的时候去掉注释 */
    // "noEmit": true,                              /* 不生成编译文件，这个一般比较少用 */
    // "importHelpers": true,                       /* 指定是否引入tslib里的辅助工具函数 */
    // "downlevelIteration": true,                  /* target为'ES5' or 'ES3'时，为'for-of', spread, and destructuring'中的迭代器提供完全支持 */
    // "isolatedModules": true,                     /* 指定是否将每个文件作为单独的模块，默认为true，它不可以和declaration同时设定 */
    /* Strict Type-Checking Options */
    "strict": true, /* 用于指定是否启动所有类型检查，如果设为true则会同时开启下面这几个严格类型检查，默认为false  */
    // "noImplicitAny": true,                       /* 如果我们没有为一些值设置明确的类型，编译器会默认认为这个值为any，如果noImplicitAny的值为true的话。则没有明确的类型会报错。默认值为false */
    // "strictNullChecks": true,                    /* null和undefined值不能赋给非这两种类型的值，别的类型也不能赋给他们，除了any类型。还有个例外就是undefined可以赋值给void类型 */
    // "strictFunctionTypes": true,                 /* 用于指定是否使用函数参数双向协变检查 */
    // "strictBindCallApply": true,                 /* 设为true后会对bind、call和apply绑定的方法的参数的检测是严格检测的 */
    // "strictPropertyInitialization": true,        /* 设为true后会检查类的非undefined属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启strictNullChecks，默认为false */
    // "noImplicitThis": true,                      /* 当this表达式的值为any类型的时候，生成一个错误 */
    // "alwaysStrict": true,                        /* 指定始终以严格模式检查每个模块，并且在编译之后的js文件中加入"use strict"字符串，用来告诉浏览器该js为严格模式 */
    /* Additional Checks */
    "noUnusedLocals": true, /* 用于检查是否有定义了但是没有使用的变量，对于这一点的检测，使用eslint可以在你书写代码的时候做提示，你可以配合使用。它的默认值为false */
    // "noUnusedParameters": true,                  /* 用于检查是否有在函数体中没有使用的参数，这个也可以配合eslint来做检查，默认为false */
    "noImplicitReturns": true, /* 用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示，默认为false */
    "noFallthroughCasesInSwitch": true, /* 用于检查switch中是否有case没有使用break跳出switch，默认为false */
    // "noUncheckedIndexedAccess": true,            /* Include 'undefined' in index signature results */
    // "noPropertyAccessFromIndexSignature": true,  /* Require undeclared properties from index signatures to use element accesses. */
    /* Module Resolution Options */
    "moduleResolution": "node", /* 指定模块解析策略：'node'（Node.js）或'classic'（TypeScript 1.6之前）。 */
    "baseUrl": "./", /* 用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl的影响 */
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }, /* 用于设置模块名称到基于baseUrl的路径映射 */
    // "rootDirs": [],                              /* 可以指定一个路径列表，在构建时编译器会将这个路径列表中的路径的内容都放到一个文件夹中 */
    // "typeRoots": [],                             /* 用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载 */
    // "types": [],                                 /* 用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来 */
    "allowSyntheticDefaultImports": true, /* 用来指定允许从没有默认导出的模块中默认导入 */
    "esModuleInterop": true, /* 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性 */
    // "preserveSymlinks": true,                    /* 不把符号链接解析为其真实路径，具体可以了解下webpack和nodejs的symlink相关知识 */
    // "allowUmdGlobalAccess": true,                /* Allow accessing UMD globals from modules. */
    /* Source Map Options */
    // "sourceRoot": "",                            /* 用于指定调试器应该找到TypeScript文件而不是源文件位置，这个值会被写进.map文件里 */
    // "mapRoot": "",                               /* 用于指定调试器找到映射文件而非生成文件的位置，指定map文件的根路径，该选项会影响.map文件中的sources属性 */
    // "inlineSourceMap": true,                     /* 指定是否将map文件的内容和js文件编译在同一个js文件中，如果设为true，则map的内容会以//# sourceMappingURL=然后拼接base64字符串的形式插入在js文件底部 */
    // "inlineSources": true,                       /* 用于指定是否进一步将.ts文件的内容也包含到输入文件中，需要设置'--inlineSourceMap' or 或'--sourceMap'. */
    /* Experimental Options */
    "experimentalDecorators": true, /* 用于指定是否启用实验性的装饰器特性 */
    // "emitDecoratorMetadata": true,               /* 用于指定是否为装饰器提供元数据支持，关于元数据，也是ES6的新标准，可以通过Reflect提供的静态方法获取元数据，如果需要使用Reflect的一些方法，需要引入ES2015.Reflect这个库 */
    /* Advanced Options */
    "skipLibCheck": true, /* 跳过声明文件的类型检查。 */
    "forceConsistentCasingInFileNames": true /* 禁止对同一文件使用大小写不一致的引用。 */
  }
}